openapi: 3.0.0
info:
  title: Telegram Mini App API
  description: |
    API for a Telegram mini-app that allows users to take programming quizzes, view results, and access premium quiz content.
  version: 1.0.0
servers:
  - url: 'https://api.telegram-quiz-app.com/v1'
paths:
  /quizzes:
    get:
      summary: Retrieve a list of quizzes
      operationId: getQuizzes
      responses:
        '200':
          description: A list of available quizzes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'
        '500':
          description: Server error
  '/quizzes/{quizId}':
    get:
      summary: Retrieve details of a specific quiz
      operationId: getQuizById
      parameters:
        - name: quizId
          in: path
          required: true
          description: The unique identifier of the quiz
          schema:
            type: string
      responses:
        '200':
          description: Details of the specified quiz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '404':
          description: Quiz not found
        '500':
          description: Server error
  '/quizzes/{quizId}/questions':
    get:
      summary: Retrieve questions for a specific quiz
      operationId: getQuestionsByQuizId
      parameters:
        - name: quizId
          in: path
          required: true
          description: The unique identifier of the quiz
          schema:
            type: string
      responses:
        '200':
          description: A list of questions for the specified quiz.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '404':
          description: Quiz not found
        '500':
          description: Server error
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
        '500':
          description: Server error
  '/users/{userId}/profile':
    get:
      summary: Retrieve user profile information
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
      responses:
        '200':
          description: 'User profile information, including completed quizzes and completion percentage.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
        '500':
          description: Server error
  '/users/{userId}/results':
    get:
      summary: Retrieve the user's quiz results
      operationId: getUserResults
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
      responses:
        '200':
          description: A list of the user's quiz results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResult'
        '404':
          description: User not found
        '500':
          description: Server error
  '/users/{userId}/add-quiz':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Add new quiz to user's profile
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserProfile'
      operationId: post-add-quiz-to-users-profile
      x-stoplight:
        id: j8898t3n7j21m
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuizForUser'
  '/users/{userId}/add-quiz-answer':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Add new answer to the quiz
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserProfile'
      operationId: post-users-userId-add-quiz-answer
      x-stoplight:
        id: pm3306bhqqokx
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/NewQuizForUser'
components:
  schemas:
    Quiz:
      type: object
      required:
        - _id
        - title
        - description
        - isPaid
      properties:
        _id:
          type: string
          description: The unique identifier of the quiz
        title:
          type: string
          description: The title of the quiz
        description:
          type: string
          description: A brief description of the quiz
        logoUrl:
          type: string
          description: URL to the logo image for the quiz
        isPaid:
          type: boolean
          description: Indicates whether the quiz contains premium (paid) content
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    QuizDetails:
      type: object
      required:
        - _id
        - title
        - description
        - isPaid
        - totalQuestions
      properties:
        _id:
          type: string
          description: The unique identifier of the quiz
        title:
          type: string
          description: The title of the quiz
        description:
          type: string
          description: A brief description of the quiz
        logoUrl:
          type: string
          description: URL to the logo image for the quiz
        isPaid:
          type: boolean
          description: Indicates whether the quiz contains premium (paid) content
        totalQuestions:
          type: integer
          description: The total number of questions in the quiz
    Question:
      type: object
      required:
        - _id
        - text
        - options
      properties:
        _id:
          type: string
          description: The unique identifier of the question
        text:
          type: string
          description: The text of the question
        codeSnippet:
          type: string
          description: An optional code snippet related to the question
        options:
          type: array
          description: A list of answer options for the question
          items:
            $ref: '#/components/schemas/AnswerOption'
        explanation:
          type: string
          description: An explanation of why a specific option is correct
    AnswerOption:
      type: object
      required:
        - _id
        - text
        - isCorrect
      properties:
        _id:
          type: string
          description: The unique identifier of the answer option
        text:
          type: string
          description: The text of the answer option
        isCorrect:
          type: boolean
          description: Indicates whether this option is the correct answer. This should only be revealed on the frontend after the user answers.
    NewUser:
      type: object
      required:
        - name
        - telegramId
      properties:
        name:
          type: string
          description: The name of the user
        telegramId:
          type: string
          x-stoplight:
            id: 5haxb7b4ralyc
    UserProfile:
      type: object
      required:
        - _id
        - telegramId
        - name
        - createdAt
        - completedQuizzes
      properties:
        _id:
          type: string
          description: The unique identifier of the user
        telegramId:
          type: string
          x-stoplight:
            id: bc36sk2ywnjjd
        name:
          type: string
          description: The name of the user
        createdAt:
          type: string
          format: date-time
          description: The date and time the user joined
          x-stoplight:
            id: b2djww1afchbl
        completedQuizzes:
          type: array
          description: A list of quizzes completed by the user
          items:
            $ref: '#/components/schemas/QuizResult'
    QuizResult:
      type: object
      required:
        - _id
        - quizId
        - quizTitle
        - totalQuestions
        - answers
      properties:
        _id:
          type: string
          description: The unique identifier of the quiz
        quizId:
          type: string
          description: The percentage of correct answers
          x-stoplight:
            id: 6fygsqopa3y2c
        quizTitle:
          type: string
          description: The total number of questions in the quiz
          x-stoplight:
            id: 1lx8l6sncphnd
        totalQuestions:
          type: number
          x-stoplight:
            id: 1uugt2dooy41j
        answers:
          type: array
          x-stoplight:
            id: y2f0n7caxkvhz
          items:
            $ref: '#/components/schemas/QuizAnswerResult'
    NewQuizQuestionAnswerForUser:
      title: NewQuizQuestionAnswerForUser
      x-stoplight:
        id: krzexpb1f4ja0
      type: object
      required:
        - quizId
        - questionId
        - usersAnswerId
      properties:
        quizId:
          type: string
          x-stoplight:
            id: j0gydtu5bxj22
        questionId:
          type: string
          x-stoplight:
            id: 8fw958ft9wjt9
        usersAnswerId:
          type: string
          x-stoplight:
            id: fd60ubzr3qy1b
      description: ''
    QuizAnswerResult:
      title: QuizAnswerResult
      x-stoplight:
        id: lxmrrgjzgl73h
      type: object
      required:
        - _id
        - questionId
        - questionText
        - isCorrect
        - correctAnswer
        - userAnswer
      properties:
        _id:
          type: string
          x-stoplight:
            id: 874utegarhcwy
        questionId:
          type: string
          x-stoplight:
            id: l5vl3wgxtot4q
        questionText:
          type: string
          x-stoplight:
            id: wq93jrp0dgsdg
        isCorrect:
          type: boolean
          x-stoplight:
            id: q8yncfl4eiyz4
        correctAnswer:
          type: string
          x-stoplight:
            id: dqkj06t4ygqi2
        userAnswer:
          type: string
          x-stoplight:
            id: 1dc7lsuk9sp0r
    NewQuizForUser:
      title: newQuizForUser
      x-stoplight:
        id: nmcvazdenedkj
      type: object
      required:
        - quizId
      properties:
        quizId:
          type: string
          x-stoplight:
            id: hho8iifq233iv
