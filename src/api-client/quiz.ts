/* eslint-disable */

/**
 * Generated by orval 🍺
 * Do not edit manually.
 * frontend-quiz-api
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from './fetch-instance';
import type {
  AnswerResult,
  AnswerSubmission,
  NewQuizForUser,
  NewUser,
  Question,
  Quiz,
  QuizResult,
  UserProfile,
} from './schemas';

/**
 * @summary Retrieve a list of quizzes
 */
export const getQuizzes = () => {
  return customInstance<Quiz[]>({ url: `/quizzes`, method: 'GET' });
};

export const getGetQuizzesQueryKey = () => {
  return [`/quizzes`] as const;
};

export const getGetQuizzesQueryOptions = <
  TData = Awaited<ReturnType<typeof getQuizzes>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuizzes>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQuizzesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuizzes>>> = () => getQuizzes();

  return { queryKey, queryFn, refetchOnMount: false, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getQuizzes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetQuizzesQueryResult = NonNullable<Awaited<ReturnType<typeof getQuizzes>>>;
export type GetQuizzesQueryError = void;

/**
 * @summary Retrieve a list of quizzes
 */
export const useGetQuizzes = <
  TData = Awaited<ReturnType<typeof getQuizzes>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuizzes>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetQuizzesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieve details of a specific quiz
 */
export const getQuizById = (quizId: string) => {
  return customInstance<Quiz>({ url: `/quizzes/${quizId}`, method: 'GET' });
};

export const getGetQuizByIdQueryKey = (quizId: string) => {
  return [`/quizzes/${quizId}`] as const;
};

export const getGetQuizByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getQuizById>>,
  TError = void,
>(
  quizId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuizById>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQuizByIdQueryKey(quizId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuizById>>> = () => getQuizById(quizId);

  return {
    queryKey,
    queryFn,
    enabled: !!quizId,
    refetchOnMount: false,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getQuizById>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetQuizByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getQuizById>>>;
export type GetQuizByIdQueryError = void;

/**
 * @summary Retrieve details of a specific quiz
 */
export const useGetQuizById = <TData = Awaited<ReturnType<typeof getQuizById>>, TError = void>(
  quizId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuizById>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetQuizByIdQueryOptions(quizId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieve questions for a specific quiz
 */
export const getQuestionsByQuizId = (quizId: string) => {
  return customInstance<Question[]>({ url: `/quizzes/${quizId}/questions`, method: 'GET' });
};

export const getGetQuestionsByQuizIdQueryKey = (quizId: string) => {
  return [`/quizzes/${quizId}/questions`] as const;
};

export const getGetQuestionsByQuizIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getQuestionsByQuizId>>,
  TError = void,
>(
  quizId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQuestionsByQuizId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQuestionsByQuizIdQueryKey(quizId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuestionsByQuizId>>> = () =>
    getQuestionsByQuizId(quizId);

  return {
    queryKey,
    queryFn,
    enabled: !!quizId,
    refetchOnMount: false,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getQuestionsByQuizId>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetQuestionsByQuizIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getQuestionsByQuizId>>
>;
export type GetQuestionsByQuizIdQueryError = void;

/**
 * @summary Retrieve questions for a specific quiz
 */
export const useGetQuestionsByQuizId = <
  TData = Awaited<ReturnType<typeof getQuestionsByQuizId>>,
  TError = void,
>(
  quizId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQuestionsByQuizId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetQuestionsByQuizIdQueryOptions(quizId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Submit an answer for a specific question
 */
export const submitAnswer = (
  quizId: string,
  questionId: string,
  answerSubmission: AnswerSubmission
) => {
  return customInstance<AnswerResult>({
    url: `/quizzes/${quizId}/questions/${questionId}/answer`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: answerSubmission,
  });
};

export const getSubmitAnswerMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitAnswer>>,
    TError,
    { quizId: string; questionId: string; data: AnswerSubmission },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitAnswer>>,
  TError,
  { quizId: string; questionId: string; data: AnswerSubmission },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitAnswer>>,
    { quizId: string; questionId: string; data: AnswerSubmission }
  > = (props) => {
    const { quizId, questionId, data } = props ?? {};

    return submitAnswer(quizId, questionId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitAnswerMutationResult = NonNullable<Awaited<ReturnType<typeof submitAnswer>>>;
export type SubmitAnswerMutationBody = AnswerSubmission;
export type SubmitAnswerMutationError = void;

/**
 * @summary Submit an answer for a specific question
 */
export const useSubmitAnswer = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitAnswer>>,
    TError,
    { quizId: string; questionId: string; data: AnswerSubmission },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof submitAnswer>>,
  TError,
  { quizId: string; questionId: string; data: AnswerSubmission },
  TContext
> => {
  const mutationOptions = getSubmitAnswerMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Create a new user
 */
export const createUser = (newUser: NewUser) => {
  return customInstance<UserProfile>({
    url: `/users`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: newUser,
  });
};

export const getCreateUserMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: NewUser },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: NewUser },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: NewUser }> = (
    props
  ) => {
    const { data } = props ?? {};

    return createUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = NewUser;
export type CreateUserMutationError = void;

/**
 * @summary Create a new user
 */
export const useCreateUser = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: NewUser },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: NewUser },
  TContext
> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Retrieve user profile information
 */
export const getUserProfile = (userId: string) => {
  return customInstance<UserProfile>({ url: `/users/${userId}/profile`, method: 'GET' });
};

export const getGetUserProfileQueryKey = (userId: string) => {
  return [`/users/${userId}/profile`] as const;
};

export const getGetUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserProfileQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = () =>
    getUserProfile(userId);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    refetchOnMount: false,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>;
export type GetUserProfileQueryError = void;

/**
 * @summary Retrieve user profile information
 */
export const useGetUserProfile = <
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserProfileQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieve the user's quiz results
 */
export const getUserResults = (userId: string) => {
  return customInstance<QuizResult[]>({ url: `/users/${userId}/results`, method: 'GET' });
};

export const getGetUserResultsQueryKey = (userId: string) => {
  return [`/users/${userId}/results`] as const;
};

export const getGetUserResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserResults>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserResults>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserResultsQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserResults>>> = () =>
    getUserResults(userId);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    refetchOnMount: false,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getUserResults>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetUserResultsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserResults>>>;
export type GetUserResultsQueryError = void;

/**
 * @summary Retrieve the user's quiz results
 */
export const useGetUserResults = <
  TData = Awaited<ReturnType<typeof getUserResults>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserResults>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserResultsQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Add new quiz to user's profile
 */
export const getUsersUserIdAddQuiz = (userId: string, newQuizForUser: NewQuizForUser) => {
  return customInstance<UserProfile>({
    url: `/users/${userId}/add-quiz`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: newQuizForUser,
  });
};

export const getGetUsersUserIdAddQuizMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getUsersUserIdAddQuiz>>,
    TError,
    { userId: string; data: NewQuizForUser },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getUsersUserIdAddQuiz>>,
  TError,
  { userId: string; data: NewQuizForUser },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getUsersUserIdAddQuiz>>,
    { userId: string; data: NewQuizForUser }
  > = (props) => {
    const { userId, data } = props ?? {};

    return getUsersUserIdAddQuiz(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetUsersUserIdAddQuizMutationResult = NonNullable<
  Awaited<ReturnType<typeof getUsersUserIdAddQuiz>>
>;
export type GetUsersUserIdAddQuizMutationBody = NewQuizForUser;
export type GetUsersUserIdAddQuizMutationError = unknown;

/**
 * @summary Add new quiz to user's profile
 */
export const useGetUsersUserIdAddQuiz = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getUsersUserIdAddQuiz>>,
    TError,
    { userId: string; data: NewQuizForUser },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof getUsersUserIdAddQuiz>>,
  TError,
  { userId: string; data: NewQuizForUser },
  TContext
> => {
  const mutationOptions = getGetUsersUserIdAddQuizMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Add new answer to the quiz
 */
export const postUsersUserIdAddQuizAnswer = (userId: string) => {
  return customInstance<UserProfile>({ url: `/users/${userId}/add-quiz-answer`, method: 'POST' });
};

export const getPostUsersUserIdAddQuizAnswerMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersUserIdAddQuizAnswer>>,
    TError,
    { userId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersUserIdAddQuizAnswer>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersUserIdAddQuizAnswer>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {};

    return postUsersUserIdAddQuizAnswer(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersUserIdAddQuizAnswerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersUserIdAddQuizAnswer>>
>;

export type PostUsersUserIdAddQuizAnswerMutationError = unknown;

/**
 * @summary Add new answer to the quiz
 */
export const usePostUsersUserIdAddQuizAnswer = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersUserIdAddQuizAnswer>>,
    TError,
    { userId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersUserIdAddQuizAnswer>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getPostUsersUserIdAddQuizAnswerMutationOptions(options);

  return useMutation(mutationOptions);
};
